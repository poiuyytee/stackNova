import React, { useState, useEffect, useMemo } from 'react';
import axios from 'axios';

// --- Axios API Instance ---
const api = axios.create({
Â  Â  baseURL: 'http://localhost:5000/api/portfolio',
Â  Â  withCredentials: true
});


const Gold = () => {
Â  Â  const [goldHoldings, setGoldHoldings] = useState([]);
Â  Â  const [newHolding, setNewHolding] = useState({
Â  Â  Â  Â  quantityInGrams: '',
Â  Â  Â  Â  purchasePricePerGram: '',
Â  Â  Â  Â  purchaseDate: new Date().toISOString().split('T')[0],
Â  Â  });

Â  Â  const [isLoading, setIsLoading] = useState(true);
Â  Â  const [error, setError] = useState(null);
Â  Â  const [showAddForm, setShowAddForm] = useState(false);

Â  Â  const fetchGoldHoldings = async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  Â  Â  const response = await api.get('/getgold');
Â  Â  Â  Â  Â  Â  setGoldHoldings(response.data.success ? response.data.gold || [] : []);
Â  Â  Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error("Error fetching gold holdings:", err);
Â  Â  Â  Â  Â  Â  setError("Failed to fetch gold holdings. Please try again later.");
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchGoldHoldings();
Â  Â  }, []);

Â  Â  const handleAddHolding = async (e) => {
Â  Â  Â  Â  e.preventDefault();
Â  Â  Â  Â  const { quantityInGrams, purchasePricePerGram, purchaseDate } = newHolding;
Â  Â  Â  Â  if (!quantityInGrams || !purchasePricePerGram || !purchaseDate) {
Â  Â  Â  Â  Â  Â  alert("All fields are required.");
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await api.post('/addgold', {
Â  Â  Â  Â  Â  Â  Â  Â  quantityInGrams: parseFloat(quantityInGrams),
Â  Â  Â  Â  Â  Â  Â  Â  purchasePricePerGram: parseFloat(purchasePricePerGram),
Â  Â  Â  Â  Â  Â  Â  Â  purchaseDate,
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  fetchGoldHoldings(); // Refresh data
Â  Â  Â  Â  Â  Â  setNewHolding({ quantityInGrams: '', purchasePricePerGram: '', purchaseDate: new Date().toISOString().split('T')[0] });
Â  Â  Â  Â  Â  Â  setShowAddForm(false);
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error("Error adding gold holding:", err);
Â  Â  Â  Â  Â  Â  alert("Failed to add holding.");
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const handleRemoveHolding = async (goldId) => {
Â  Â  Â  Â  if (window.confirm("Are you sure you want to remove this holding?")) {
Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  await api.post('/removegold', { goldId });
Â  Â  Â  Â  Â  Â  Â  Â  setGoldHoldings(prev => prev.filter(h => h.id !== goldId));
Â  Â  Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Error removing gold holding:", err);
Â  Â  Â  Â  Â  Â  Â  Â  alert("Failed to remove holding.");
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  };

    // âœ… FIX: Use parseFloat to ensure all calculations are done with numbers
Â  Â  const portfolioSummary = useMemo(() => {
Â  Â  Â  Â  const totalValue = goldHoldings.reduce((sum, h) => sum + parseFloat(h.currentValue || 0), 0);
Â  Â  Â  Â  const totalGain = goldHoldings.reduce((sum, h) => sum + parseFloat(h.totalGain || 0), 0);
Â  Â  Â  Â  const totalWeightInGrams = goldHoldings.reduce((sum, h) => sum + parseFloat(h.quantityInGrams || 0), 0);
Â  Â  Â  Â  return { totalValue, totalGain, totalWeightInGrams };
Â  Â  }, [goldHoldings]);

Â  Â  if (isLoading) return (
Â  Â  Â  Â  <div className="flex justify-center items-center h-screen bg-gray-900 text-white">
Â  Â  Â  Â  Â  Â  <p className="text-xl text-gray-400">Loading Gold Portfolio...</p>
Â  Â  Â  Â  </div>
Â  Â  );
Â  Â  
Â  Â  if (error) return (
Â  Â  Â  Â  <div className="flex justify-center items-center h-screen bg-gray-900 text-white">
Â  Â  Â  Â  Â  Â  <div className="bg-red-900/50 border border-red-500 text-red-300 p-4 rounded-lg text-center">
Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-bold">Error</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p>{error}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );

Â  Â  return (
Â  Â  Â  Â  <div className="bg-gray-900 text-white min-h-screen p-4 sm:p-6 lg:p-8 font-sans">
Â  Â  Â  Â  Â  Â  <div className="max-w-7xl mx-auto">
Â  Â  Â  Â  Â  Â  Â  Â  {/* --- Header --- */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h1 className="text-4xl font-bold text-amber-400">Gold Portfolio ðŸª™</h1>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowAddForm(!showAddForm)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-amber-500 hover:bg-amber-600 text-gray-900 font-bold py-2 px-5 rounded-lg shadow-md transition-transform transform hover:scale-105"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {showAddForm ? 'Cancel' : '+ Add Holding'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* --- Add Form --- */}
Â  Â  Â  Â  Â  Â  Â  Â  {showAddForm && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-800 p-6 rounded-xl mb-8 shadow-lg border border-gray-700 transition-all">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-semibold mb-5 text-white">Add New Gold Holding</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <form onSubmit={handleAddHolding} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Quantity (grams)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={newHolding.quantityInGrams}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewHolding({ ...newHolding, quantityInGrams: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-gray-700 border border-gray-600 text-white placeholder-gray-400 rounded-lg p-3 focus:ring-amber-500 focus:border-amber-500 w-full"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Purchase Price per Gram ($)"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={newHolding.purchasePricePerGram}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewHolding({ ...newHolding, purchasePricePerGram: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-gray-700 border border-gray-600 text-white placeholder-gray-400 rounded-lg p-3 focus:ring-amber-500 focus:border-amber-500 w-full"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={newHolding.purchaseDate}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setNewHolding({ ...newHolding, purchaseDate: e.target.value })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-gray-700 border border-gray-600 text-white placeholder-gray-400 rounded-lg p-3 focus:ring-amber-500 focus:border-amber-500 w-full"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button type="submit" className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-5 rounded-lg md:col-start-2 lg:col-start-4">Save Holding</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  {/* --- Portfolio Summary --- */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-700 transition-all duration-300 hover:border-amber-500 hover:shadow-amber-500/10">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="text-sm font-medium text-gray-400 uppercase tracking-wider">Total Value</h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-bold mt-2 text-white">${portfolioSummary.totalValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-700 transition-all duration-300 hover:border-amber-500 hover:shadow-amber-500/10">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="text-sm font-medium text-gray-400 uppercase tracking-wider">Total Weight</h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-3xl font-bold mt-2 text-white">{portfolioSummary.totalWeightInGrams.toFixed(2)} g</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-700 transition-all duration-300 hover:border-amber-500 hover:shadow-amber-500/10">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="text-sm font-medium text-gray-400 uppercase tracking-wider">Total Gain/Loss</h4>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className={`text-3xl font-bold mt-2 ${portfolioSummary.totalGain >= 0 ? 'text-green-400' : 'text-red-400'}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ${portfolioSummary.totalGain.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* --- Holdings Table --- */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-800 rounded-xl shadow-lg overflow-x-auto border border-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <table className="w-full text-left">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <thead className="bg-gray-700/50">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {['Purchase Date', 'Quantity (g)', 'Purchase Price/g', 'Live Price/g', 'Current Value', 'Gain/Loss', 'Gain %', 'Action'].map(header => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <th key={header} className="p-4 text-sm font-semibold text-gray-300 uppercase tracking-wider">{header}</th>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </thead>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {goldHoldings.length > 0 ? goldHoldings.map(h => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr key={h.id} className="border-b border-gray-700 last:border-b-0 hover:bg-gray-700/50 transition-colors duration-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-4 whitespace-nowrap">{new Date(h.purchase_date).toLocaleDateString()}</td>
                                        {/* âœ… FIX: Use parseFloat before calling toFixed */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-4 whitespace-nowrap">{parseFloat(h.quantityInGrams || 0).toFixed(2)} g</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-4 whitespace-nowrap">${parseFloat(h.purchasePricePerGram || 0).toFixed(2)}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-4 whitespace-nowrap">{h.livePricePerGram ? `$${parseFloat(h.livePricePerGram).toFixed(2)}` : <span className="text-gray-500">N/A</span>}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-4 whitespace-nowrap font-bold">{h.currentValue ? `$${parseFloat(h.currentValue).toFixed(2)}` : <span className="text-gray-500">N/A</span>}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className={`p-4 whitespace-nowrap font-semibold ${parseFloat(h.totalGain || 0) >= 0 ? 'text-green-400' : 'text-red-400'}`}>{h.totalGain ? `$${parseFloat(h.totalGain).toFixed(2)}` : <span className="text-gray-500">N/A</span>}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className={`p-4 whitespace-nowrap font-semibold ${parseFloat(h.gainPercent || 0) >= 0 ? 'text-green-400' : 'text-red-400'}`}>{h.gainPercent ? `${parseFloat(h.gainPercent).toFixed(2)}%` : <span className="text-gray-500">N/A</span>}</td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td className="p-4 whitespace-nowrap">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => handleRemoveHolding(h.id)} className="bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded-md text-sm">Remove</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <td colSpan="8" className="text-center p-8 text-gray-400">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  No gold holdings found. Add one to get started!
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </td>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tr>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </tbody>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </table>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

export default Gold;
